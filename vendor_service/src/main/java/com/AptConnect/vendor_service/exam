Spring-Security
-------------------------------------------------------------------------------

@PostMapping("/issue-book")
    public ResponseEntity<Issue> issueBook(@RequestBody Issue issue) {
        Optional<User> userOpt = userRepo.findById(issue.getUser().getId());
        if(userOpt.isPresent() && userOpt.get().getSubscribed())
        {
            Issue savedIssue = issueRepo.save(issue);
            return ResponseEntity.ok(savedIssue);
        }
        else{
            throw new UserNotSubscribedException("User subscription has expired");
        }


@PostMapping("/user")
    public ResponseEntity<User> createUser(@RequestBody User user) {
        User savedUser = userRepo.save(user);
        return ResponseEntity.ok(savedUser);
    }


@GetMapping("renew-user-subscription/{id}")
    public ResponseEntity<User> renewUserSubscription(@PathVariable Long id) {
        Optional<User> userOpt = userRepo.findById(id);
        if(userOpt.isPresent()){
            User user = userOpt.get();
            user.setSubscribed(true);
            userRepo.save(user);
            return ResponseEntity.ok(user);
        }
        else{
            return ResponseEntity.noContent().build();
        }
    }

@EnableWebSecurity
public class WebSecurityConfigurer extends WebSecurityConfigurerAdapter{
@Override
protected void configure(HttpSecurity http) throws Exception
{
    http
    .csrf().disable()
    .authorizeRequests()
    .antMatchers("/api/v1/issue-book [POST]").permitAll()
    .anyRequest().authenticated()
    .and().httpBasic();
}
@Bean
public PasswordEncoder passwordEncoder(){
    return new BCryptPasswordEncoder();
}

......................................................................................
JavaScript-Coding(SpecialNumber)
--------------------------------------------------------------------------------------

function factorial(n) {
    return n === 0 || n === 1 ? 1 : Array.from({length: n - 1}, (_, i) => i + 2).reduce((acc, val) => acc * val, 1);
}
function finalSum(num) {
    while (num >= 10) {
        num = num.toString().split('').reduce((acc, digit) => acc + parseInt(digit), 0);
    }    return num;
}
function isSpecialNumber(num, digitSet) {
    while (num > 0) {
        const digit = num % 10;
        if (!digitSet.has(digit)) {
            return false;
        }        num = Math.floor(num / 10);
    }    return true;
}
function factorialSum(array_length, arr) {
    let specialCount = 0;
    for (const num of arr) {
        const finalSumValue = finalSum(num);
        const factorialSumValue = factorial(finalSumValue);
        const digitSet = new Set(factorialSumValue.toString().split('').map(Number));

        if (isSpecialNumber(num, digitSet)) {
            specialCount++;        }    }    return specialCount;
}
// Assuming gets() and print() methods are defined in the environmentconst array_length = parseInt(gets().trim(), 10);
const arr = Array.from({ length: array_length }, () => parseInt(gets().trim(), 10));

const result = factorialSum(array_length, arr);
print(result);



.......................................................................................................................

Angular -Observables
-----------------------------------------------------------------------------------------------------------------------

title = 'Reports Dashboard';
salesData$: Observable<Sales[]>;
totalSales$: Observable<number>;
totalCashSales$: Observable<number>;
totalCreditSales$: Observable<number>;
mostSalesBuyer$: Observable<{ buyerName: string; totalSale: number }>;

constructor(private reportsService: ReportsService) {}

ngOnInit() {
  // Initialize the above defined observables here
  this.salesData$ = this.reportsService.getSalesData();
  this.totalSales$ = this.reportsService.calculateTotalSales(this.salesData$);
  this.totalCashSales$ = this.reportsService.calculateTotalCashSale(this.salesData$);
  this.totalCreditSales$ = this.reportsService.calculateTotalCreditSale(this.salesData$);
  this.mostSalesBuyer$ = this.reportsService.calculateBuyerWithMostSale(this.salesData$);
}


getSalesData(): Observable<Sales[]> {
  return of(salesData).pipe(
    map((data: any) => data.sales)
  );
}

// TODO: Implement the below function to return the total amount of sales
calculateTotalSales(salesData: Observable<Sales[]>): Observable<number> {
  return salesData.pipe(
    map((sales) => sales.reduce((total, sale) => total + sale.saleTotal, 0))
  );
}

// TODO: Implement the below function to return sum of all sales where creditCard attribute is false.
calculateTotalCashSale(salesData: Observable<Sales[]>): Observable<number> {
  return salesData.pipe(
    map((sales) => sales.filter((sale) => !sale.creditCard)
      .reduce((total, sale) => total + sale.saleTotal, 0))
  );
}

// TODO: Implement the below function to return sum of all sales where creditCard attribute is true.
calculateTotalCreditSale(salesData: Observable<Sales[]>): Observable<number> {
  return salesData.pipe(
    map((sales) => sales.filter((sale) => sale.creditCard)
      .reduce((total, sale) => total + sale.saleTotal, 0))
  );
}

calculateBuyerWithMostSale(
  salesData: Observable<Sales[]>
): Observable<{ buyerName: string; saleTotal: number }> {
  return salesData.pipe(
    map((sales) => sales.reduce(
      (mostSales, sale) => sale.saleTotal > mostSales.saleTotal ? sale : mostSales,
      { buyerName: "", saleTotal: 0 }
    ))
  );
}


.............................................................................................................
Angular-Batsman & bowler (youTube)

-------------------------------------------------------------------------------------------------------------

player.service.ts

import { Player } from './player.model';
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';

@Injectable()
export class PlayerService {
  playersChanged = new Subject<Player[]>();
  private count: number = 7;
  private players: Player[] = [
    new Player(1, 'M S Dhoni', 'Wicket Keeper'),
    new Player(2, 'Virat Kohli', 'Batsman'),
    new Player(3, 'Jasprit Bumrah', 'Bowler'),
    new Player(4, 'Rohit Sharma', 'Batsman'),
    new Player(5, 'Rishabh Pant', 'Wicket Keeper'),
    new Player(6, 'T. Natarajan', 'Bowler'),
    new Player(7, 'R Ashwin', 'Bowler'),
  ];

  getPlayers() {
    return this.players.slice(); // Return a copy of players array
  }

  generateID() {
    this.count++; // Increment count
    return this.count;
  }

  getPlayer(id: number) {
    return this.players.find(player => player.id === id);
  }

  addPlayer(player: Player) {
    this.players.push(player); // Add new player to players array
    this.playersChanged.next(this.getPlayers()); // Emit changes to subscribers
  }

  updatePlayer(id: number, newPlayer: Player) {
   newPlayer.description="Bowler';
this.players[index-1]=newPlayer;
this.playersChanged.next(this.getPlayers());
  }

  deletePlayer(id: number) {
    this.players.splice(index,1);
    this.playersChanged.next(this.getPlayers());
}






team.service.ts

import { Player } from '../players/player.model';
import { EventEmitter, Injectable } from '@angular/core';

@Injectable()
export class TeamService {
  private team: Player[] = [];
  teamChanged = new EventEmitter<Player[]>();

  getTeam() {
    return this.team.slice(); // Return a copy of team array
  }

  editPlayer(id: number, newPlayer: Player) {
    const index = this.team.findIndex(pl => pl.id === id);
    this.team[index] = newPlayer; // Edit player in team

  }

  addPlayer(player: Player) {
    const existingPlayer = this.team.find(p => p.id === player.id);
    if (existingPlayer) {
      alert("This Player already exists in your team !!");
    } else {
      this.team.push(player); // Add player to team

    }
  }

  deletePlayer(id: number) {
        this.team=this.team.filter(pl=>pl.id!==id);
  }

  getStatus() {
    var status:String[]=[];

    const batsmenCount = this.getTeam().filter(player => player.description === 'Batsman').length;
    const bowlersCount = this.getTeam().filter(player => player.description === 'Bowler').length;
    const wicketKeeperCount = this.getTeam().filter(player => player.description === 'Wicket Keeper').length;


    if (batsmenCount !== 2) {
      status.push("You do not have required number of batsmen in your team");
    }

    if (bowlersCount !== 2) {
      status.push("You do not have required number of bowler in your team");
    }

    if (wicketKeeperCount !== 1) {
      status.push("You do not have the required number of wicket-keepers in your team");
    }

    return status;
  }
}

....................................................................................................................
Angular- Batsman & bowler
---------------------------------------------------------------------------------------------------------------------
player.service.ts

import { Player } from './player.model';
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';

@Injectable()
export class PlayerService {
  playersChanged = new Subject<Player[]>();
  private count: number = 7;
  private players: Player[] = [
    new Player(1, 'M S Dhoni', 'Wicket Keeper'),
    new Player(2, 'Virat Kohli', 'Batsman'),
    new Player(3, 'Jasprit Bumrah', 'Bowler'),
    new Player(4, 'Rohit Sharma', 'Batsman'),
    new Player(5, 'Rishabh Pant', 'Wicket Keeper'),
    new Player(6, 'T. Natarajan', 'Bowler'),
    new Player(7, 'R Ashwin', 'Bowler'),
  ];

  getPlayers() {
    return this.players.slice(); // Return a copy of players array
  }

  generateID() {
    this.count++; // Increment count
    return this.count;
  }

  getPlayer(id: number) {
    return this.players.find(player => player.id === id);
  }

  addPlayer(player: Player) {
    player.id = this.generateID(); // Generate unique ID for new player
    this.players.push(player); // Add new player to players array
    this.playersChanged.next(this.getPlayers()); // Emit changes to subscribers
  }

  updatePlayer(id: number, newPlayer: Player) {
    const index = this.players.findIndex(player => player.id === id);
    if (index !== -1) {
      this.players[index] = newPlayer; // Update player details
      this.playersChanged.next(this.getPlayers()); // Emit changes to subscribers
    }
  }

  deletePlayer(id: number) {
    const index = this.players.findIndex(player => player.id === id);
    if (index !== -1) {
      this.players.splice(index, 1); // Remove player from players array
      this.playersChanged.next(this.getPlayers()); // Emit changes to subscribers
    }
  }
}

team.service.ts

import { Player } from '../players/player.model';
import { EventEmitter, Injectable } from '@angular/core';

@Injectable()
export class TeamService {
  private team: Player[] = [];
  teamChanged = new EventEmitter<Player[]>();

  getTeam() {
    return this.team.slice(); // Return a copy of team array
  }

  editPlayer(id: number, newPlayer: Player) {
    const index = this.team.findIndex(player => player.id === id);
    if (index !== -1) {
      this.team[index] = newPlayer; // Edit player in team
      this.teamChanged.emit(this.getTeam()); // Emit changes to subscribers
    }
  }

  addPlayer(player: Player) {
    const existingPlayer = this.team.find(p => p.id === player.id);
    if (existingPlayer) {
      alert("This Player already exists in your team !!");
    } else {
      this.team.push(player); // Add player to team
      this.teamChanged.emit(this.getTeam()); // Emit changes to subscribers
    }
  }

  deletePlayer(id: number) {
    const index = this.team.findIndex(player => player.id === id);
    if (index !== -1) {
      this.team.splice(index, 1); // Remove player from team
      this.teamChanged.emit(this.getTeam()); // Emit changes to subscribers
    }
  }

  getStatus() {
    const batsmenCount = this.team.filter(player => player.description === 'Batsman').length;
    const bowlersCount = this.team.filter(player => player.description === 'Bowler').length;
    const wicketKeeperCount = this.team.filter(player => player.description === 'Wicket Keeper').length;

    const status: string[] = [];

    if (batsmenCount !== 2) {
      status.push("You do not have required number of batsmen in your team");
    }

    if (bowlersCount !== 2) {
      status.push("You do not have required number of bowler in your team");
    }

    if (wicketKeeperCount !== 1) {
      status.push("You do not have the required number of wicket-keepers in your team");
    }

    return status;
  }

...........................................................................................................
HTML,CSS,JS(form Valiodation)
--------------------------------------------------------------------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Course Registration</title>
<style>
    body {
        background-color: #f0f0f0; /* Neutral background color */
        font-family: Arial, sans-serif;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
    }

    .registration-form {
        background-color: #ffffff;
        padding: 20px;
        width: 400px;
        border-radius: 8px;
        box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.1);
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
    }

    .form-group input[type="text"],
    .form-group input[type="email"],
    .form-group input[type="password"] {
        width: calc(100% - 12px);
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .form-group input[type="text"]:focus,
    .form-group input[type="email"]:focus,
    .form-group input[type="password"]:focus {
        outline: none;
        border-color: #4CAF50; /* Green outline on focus */
    }

    .form-group.error {
        border-color: red;
    }

    .error-message {
        color: red;
        font-size: 0.8em;
        margin-top: 5px;
    }

    .submit-button {
        background: linear-gradient(to bottom, #4CAF50, #45a049); /* Green gradient background */
        color: #ffffff;
        border: none;
        border-radius: 4px;
        padding: 10px 20px;
        cursor: pointer;
    }

    .submit-button:hover {
        background: linear-gradient(to bottom, #45a049, #4CAF50); /* Darker green gradient on hover */
    }

    .success-message {
        color: green;
        font-weight: bold;
        margin-top: 10px;
    }
</style>
</head>
<body>
<div class="registration-form">
    <form id="registration-form">
        <div class="form-group">
            <label for="studentID">Student ID</label>
            <input type="text" id="studentID" name="studentID" required>
            <div id="studentID-error" class="error-message"></div>
        </div>

        <div class="form-group">
            <label for="email">Email</label>
            <input type="email" id="email" name="email" required>
            <div id="email-error" class="error-message"></div>
        </div>

        <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" name="password" required>
            <div id="password-error" class="error-message"></div>
        </div>

        <button type="submit" class="submit-button">Register</button>

        <div id="success-message" class="success-message" style="display: none;">
            Registration successful!
        </div>
    </form>
</div>

<script>
    const registrationForm = document.getElementById('registration-form');
    const studentID = document.getElementById('studentID');
    const email = document.getElementById('email');
    const password = document.getElementById('password');
    const studentIDError = document.getElementById('studentID-error');
    const emailError = document.getElementById('email-error');
    const passwordError = document.getElementById('password-error');
    const successMessage = document.getElementById('success-message');

    registrationForm.addEventListener('submit', function(event) {
        event.preventDefault();
        let errorFlag = false;

        // Reset previous error messages
        studentIDError.textContent = '';
        emailError.textContent = '';
        passwordError.textContent = '';

        // Validate Student ID (letters and numbers only)
        const studentIDValue = studentID.value.trim();
        const studentIDRegex = /^[a-zA-Z0-9]*$/;
        if (!studentIDValue) {
            showError(studentID, studentIDError, 'Student ID is required.');
            errorFlag = true;
        } else if (!studentIDRegex.test(studentIDValue)) {
            showError(studentID, studentIDError, 'Student ID can only contain letters and numbers.');
            errorFlag = true;
        }

        // Validate Email
        const emailValue = email.value.trim();
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailValue) {
            showError(email, emailError, 'Email is required.');
            errorFlag = true;
        } else if (!emailRegex.test(emailValue)) {
            showError(email, emailError, 'Please enter a valid email address.');
            errorFlag = true;
        }

        // Validate Password (at least 8 characters, uppercase, lowercase, number, special character)
        const passwordValue = password.value;
        const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*])[A-Za-z\d!@#$%^&*]{8,}$/;
        if (!passwordValue) {
            showError(password, passwordError, 'Password is required.');
            errorFlag = true;
        } else if (!passwordRegex.test(passwordValue)) {
            showError(password, passwordError, 'Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one number, and one special character.');
            errorFlag = true;
        }

        // If no errors, show success message
        if (!errorFlag) {
            successMessage.style.display = 'block';
            registrationForm.reset(); // Reset form
        }
    });

    // Function to display error message and highlight input field
    function showError(inputField, errorField, errorMessage) {
        inputField.classList.add('error');
        errorField.textContent = errorMessage;
    }
</script>

</body>
</html>


...........................................................................................................
SQL
-----------------------------------------------------------------------------------------------------------

Find marks of students within a range


query:SELECT *
FROM STUDENTS
WHERE MARKS BETWEEN 400 AND 6000
  AND MARKS NOT IN (1200, 5236);


select question lo unadhi,max(item_product) as max_item_product from #items where items_product>3000 group by question lo unadhi

..........................................................................................................

Coding &  Debugging
---------------------------------------------------------------------------------------------------------

1. Fix the code to determine if a given string is a valid credit card number - 2(Debugging)

Code::

import java.util.Scanner;

public class Solution {

    public static boolean buggyIsValidCreditCard(String cardNumber) {
        // Check length
        if (cardNumber.length() != 16) {
            return false;
        }

        // Check starting digit
        char startDigit = cardNumber.charAt(0);
        if (startDigit != '4' && startDigit != '5' && startDigit != '6') {
            return false;
        }

        // Check if all characters are digits
        for (char c : cardNumber.toCharArray()) {
            if (!Character.isDigit(c)) {
                return false;
            }
        }

        // Apply Luhn algorithm
        int sum = 0;
        boolean doubleDigit = false; // Flag to alternate doubling
        for (int i = cardNumber.length() - 1; i >= 0; i--) {
            int digit = cardNumber.charAt(i) - '0';
            if (doubleDigit) {
                digit *= 2;
                if (digit > 9) {
                    digit = digit % 10 + digit / 10;
                }
            }
            sum += digit;
            doubleDigit = !doubleDigit; // Toggle flag for next iteration
        }

        // Check Luhn algorithm result
        return sum % 10 == 0;
    }

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        String cardNumber = scan.nextLine();
        boolean isValid = buggyIsValidCreditCard(cardNumber);
        System.out.println(isValid ? "1" : "0");
    }
}



String Scoring with Palindromes(Coding)

Code:

import java.util.Scanner;

public class Solution {
    public static int scoreString(String str) {
        int score = 0;
        int len = str.length();

        // Check for palindromes of length 4
        for (int i = 0; i <= len - 4; i++) {
            if (isPalindrome(str.substring(i, i + 4))) {
                score += 5;
            }
        }

        // Check for palindromes of length 5
        for (int i = 0; i <= len - 5; i++) {
            if (isPalindrome(str.substring(i, i + 5))) {
                score += 10;
            }
        }

        return score;
    }

    // Helper function to check if a string is a palindrome
    private static boolean isPalindrome(String s) {
        int left = 0;
        int right = s.length() - 1;

        while (left < right) {
            if (s.charAt(left) != s.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        String str = scan.next();
        int result = scoreString(str);
        System.out.println(result);
    }
}
